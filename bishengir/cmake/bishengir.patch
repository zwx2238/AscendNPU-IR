diff --git a/mlir/CMakeLists.txt b/mlir/CMakeLists.txt
index 2d9f78e03ba7..b006079aed84 100644
--- a/mlir/CMakeLists.txt
+++ b/mlir/CMakeLists.txt
@@ -214,6 +214,10 @@ endif()
 
 if( LLVM_INCLUDE_EXAMPLES )
   add_subdirectory(examples)
+  if ("bishengir" IN_LIST LLVM_EXTERNAL_PROJECTS)
+    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../third-party/bishengir/examples
+                     ${CMAKE_CURRENT_BINARY_DIR}/../third-party/bishengir/examples)
+  endif()
 endif()
 
 option(MLIR_INCLUDE_DOCS "Generate build targets for the MLIR docs."
diff --git a/mlir/include/mlir/IR/Types.h b/mlir/include/mlir/IR/Types.h
index 46bb733101c1..c6b35005e69c 100644
--- a/mlir/include/mlir/IR/Types.h
+++ b/mlir/include/mlir/IR/Types.h
@@ -132,6 +132,7 @@ public:
   bool isF64() const;
   bool isF80() const;
   bool isF128() const;
+  bool isInteger() const;
 
   /// Return true if this is an integer type with the specified width.
   bool isInteger(unsigned width) const;
diff --git a/mlir/lib/IR/Types.cpp b/mlir/lib/IR/Types.cpp
index 32dfef9e8104..1d1ba6df4db2 100644
--- a/mlir/lib/IR/Types.cpp
+++ b/mlir/lib/IR/Types.cpp
@@ -55,6 +55,8 @@ bool Type::isF128() const { return llvm::isa<Float128Type>(*this); }
 
 bool Type::isIndex() const { return llvm::isa<IndexType>(*this); }
 
+bool Type::isInteger() const { return llvm::isa<IntegerType>(*this); }
+
 /// Return true if this is an integer type with the specified width.
 bool Type::isInteger(unsigned width) const {
   if (auto intTy = llvm::dyn_cast<IntegerType>(*this))
