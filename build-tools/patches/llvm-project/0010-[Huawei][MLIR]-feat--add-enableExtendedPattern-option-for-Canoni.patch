diff --git a/mlir/include/mlir/Interfaces/ViewLikeInterface.h b/mlir/include/mlir/Interfaces/ViewLikeInterface.h
index d6479143a0a5..505d4479631e 100644
--- a/mlir/include/mlir/Interfaces/ViewLikeInterface.h
+++ b/mlir/include/mlir/Interfaces/ViewLikeInterface.h
@@ -13,6 +13,7 @@
 #ifndef MLIR_INTERFACES_VIEWLIKEINTERFACE_H_
 #define MLIR_INTERFACES_VIEWLIKEINTERFACE_H_
 
+#include "mlir/Config/mlir-config.h"
 #include "mlir/Dialect/Utils/StaticValueUtils.h"
 #include "mlir/IR/Builders.h"
 #include "mlir/IR/BuiltinAttributes.h"
@@ -60,6 +61,15 @@ class OpWithOffsetSizesAndStridesConstantArgumentFolder final
 public:
   using OpRewritePattern<OpType>::OpRewritePattern;
 
+#if BSPUB_DAVINCI_BISHENGIR
+  OpWithOffsetSizesAndStridesConstantArgumentFolder(
+      MLIRContext *context, StringRef name = StringRef())
+      : OpRewritePattern<OpType>(context) {
+    if (!name.empty())
+      this->setDebugName(name);
+  }
+#endif
+
   LogicalResult matchAndRewrite(OpType op,
                                 PatternRewriter &rewriter) const override {
     SmallVector<OpFoldResult> mixedOffsets(op.getMixedOffsets());
diff --git a/mlir/include/mlir/Transforms/Passes.h b/mlir/include/mlir/Transforms/Passes.h
index 8e4a43c3f245..26492db968ed 100644
--- a/mlir/include/mlir/Transforms/Passes.h
+++ b/mlir/include/mlir/Transforms/Passes.h
@@ -14,6 +14,7 @@
 #ifndef MLIR_TRANSFORMS_PASSES_H
 #define MLIR_TRANSFORMS_PASSES_H
 
+#include "mlir/Config/mlir-config.h"
 #include "mlir/Pass/Pass.h"
 #include "mlir/Transforms/GreedyPatternRewriteDriver.h"
 #include "mlir/Transforms/LocationSnapshot.h"
@@ -51,6 +52,11 @@ class GreedyRewriteConfig;
 /// settings (which can be overridden by pass options on the command line).
 std::unique_ptr<Pass> createCanonicalizerPass();
 
+#if BSPUB_DAVINCI_BISHENGIR
+std::unique_ptr<Pass>
+createCanonicalizerPass(const CanonicalizerOptions &options);
+#endif
+
 /// Creates an instance of the Canonicalizer pass with the specified config.
 /// `disabledPatterns` is a set of labels used to filter out input patterns with
 /// a debug label or debug name in this set. `enabledPatterns` is a set of
diff --git a/mlir/include/mlir/Transforms/Passes.td b/mlir/include/mlir/Transforms/Passes.td
index 000d9f697618..320d820a23ae 100644
--- a/mlir/include/mlir/Transforms/Passes.td
+++ b/mlir/include/mlir/Transforms/Passes.td
@@ -49,7 +49,11 @@ def Canonicalizer : Pass<"canonicalize"> {
     Option<"maxNumRewrites", "max-num-rewrites", "int64_t", /*default=*/"-1",
            "Max. number of pattern rewrites within an iteration">,
     Option<"testConvergence", "test-convergence", "bool", /*default=*/"false",
-           "Test only: Fail pass on non-convergence to detect cyclic pattern">
+           "Test only: Fail pass on non-convergence to detect cyclic pattern">,
+#ifdef BSPUB_DAVINCI_BISHENGIR
+    Option<"enableExtendedPattern", "enable-extended-patterns", "bool", /*default=*/"false",
+           "Indicate if enable custom pattern">
+#endif
   ] # RewritePassUtils.options;
 }
 
diff --git a/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp b/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp
index 535b0852ce92..f8d5d8b86f93 100644
--- a/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp
+++ b/mlir/lib/Dialect/MemRef/IR/MemRefOps.cpp
@@ -2126,11 +2126,10 @@ void ReinterpretCastOp::getCanonicalizationPatterns(RewritePatternSet &results,
                                                     MLIRContext *context) {
   results.add<ReinterpretCastOpExtractStridedMetadataFolder>(context);
 #if BSPUB_DAVINCI_BISHENGIR
-  results.add<ReinterpretCastOpExtractStridedMetadataFolder,
-              OpWithOffsetSizesAndStridesConstantArgumentFolder<
-                  ReinterpretCastOp, ReinterpretCastReturnTypeCanonicalizer,
-                  ReinterpretCastCanonicalizer>>(context);
-
+  results.add<OpWithOffsetSizesAndStridesConstantArgumentFolder<
+      ReinterpretCastOp, ReinterpretCastReturnTypeCanonicalizer,
+      ReinterpretCastCanonicalizer>>(context,
+                                     "ReinterpretCastConstantArgumentFolder");
 #endif
 }
 
diff --git a/mlir/lib/Transforms/Canonicalizer.cpp b/mlir/lib/Transforms/Canonicalizer.cpp
index d50019bd6aee..73be7d3c2004 100644
--- a/mlir/lib/Transforms/Canonicalizer.cpp
+++ b/mlir/lib/Transforms/Canonicalizer.cpp
@@ -37,8 +37,16 @@ struct Canonicalizer : public impl::CanonicalizerBase<Canonicalizer> {
     this->maxNumRewrites = config.maxNumRewrites;
     this->disabledPatterns = disabledPatterns;
     this->enabledPatterns = enabledPatterns;
+#if BSPUB_DAVINCI_BISHENGIR
+    this->enableExtendedPattern = enableExtendedPattern;
+#endif
   }
 
+#if BSPUB_DAVINCI_BISHENGIR
+  Canonicalizer(const CanonicalizerOptions &options)
+      : impl::CanonicalizerBase<Canonicalizer>(options) {}
+#endif
+
   /// Initialize the canonicalizer by building the set of patterns used during
   /// execution.
   LogicalResult initialize(MLIRContext *context) override {
@@ -54,6 +62,12 @@ struct Canonicalizer : public impl::CanonicalizerBase<Canonicalizer> {
     for (RegisteredOperationName op : context->getRegisteredOperations())
       op.getCanonicalizationPatterns(owningPatterns, context);
 
+#if BSPUB_DAVINCI_BISHENGIR
+    if (!enableExtendedPattern) {
+      disabledPatterns.push_back("ReinterpretCastConstantArgumentFolder");
+    }
+#endif
+
     patterns = std::make_shared<FrozenRewritePatternSet>(
         std::move(owningPatterns), disabledPatterns, enabledPatterns);
     return success();
@@ -83,3 +97,10 @@ mlir::createCanonicalizerPass(const GreedyRewriteConfig &config,
   return std::make_unique<Canonicalizer>(config, disabledPatterns,
                                          enabledPatterns);
 }
+
+#if BSPUB_DAVINCI_BISHENGIR
+std::unique_ptr<Pass>
+mlir::createCanonicalizerPass(const CanonicalizerOptions &options) {
+  return std::make_unique<Canonicalizer>(options);
+}
+#endif
diff --git a/mlir/test/Pass/run-reproducer.mlir b/mlir/test/Pass/run-reproducer.mlir
index bf3ab2dae2ff..275513b7636a 100644
--- a/mlir/test/Pass/run-reproducer.mlir
+++ b/mlir/test/Pass/run-reproducer.mlir
@@ -1,6 +1,8 @@
 // RUN: mlir-opt %s --run-reproducer -dump-pass-pipeline 2>&1 | FileCheck %s
 // RUN: mlir-opt %s --run-reproducer -mlir-print-ir-before=cse 2>&1 | FileCheck -check-prefix=BEFORE %s
 
+// UNSUPPORTED: bspub_davinci_bishengir
+
 func.func @foo() {
   %0 = arith.constant 0 : i32
   return
